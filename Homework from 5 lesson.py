"""
1. Создать программно файл в текстовом формате, записать в него построчно данные, вводимые пользователем.
   Об окончании ввода данных свидетельствует пустая строка.
"""
input_str = input('Введите следующую строку: ')
with open('File', 'w') as file:
    while input_str: # пустая строка = False - пользователь ничего не ввел, конец цикла
        file.write(input_str+'\n')
        input_str = input('Введите следующую строку: ')

"""
2. Создать текстовый файл (не программно), сохранить в нем несколько строк,
   выполнить подсчет количества строк, количества слов в каждой строке.
"""
with open('File', 'r') as f_obj: # "r" можно не прописывать
    content = f_obj.readlines() #  метод считавает все строки в список
    print(content)
    print('Кол-во строк в файле: ', len(content))
    for i in range(0, len(content)): # для каждой строки, пройтись циклом
        # разбтваем кортеж на строки
        print(len(content[i].split())) #ля каждой строки (разделена пробелом) split
        print('кол-во слов в строке' , i + 1, 'равна', len(content[i].split()))

# Альтернативный вариант выполнения
# with open("File") as file:
#     file_lines = file.readlines()
#     print('Кол-во строк в файле: ', len(file_lines))
#     for line_number, line in enumerate(file_lines, 1):
#         print(f'Колличество слов в строке {line_number}:', len(line.split()))

"""
3. Создать текстовый файл (не программно), построчно записать фамилии сотрудников и величину их окладов.
   Определить, кто из сотрудников имеет оклад менее 20 тыс., вывести фамилии этих сотрудников.
   Выполнить подсчет средней величины дохода сотрудников.
"""
sum = 0

with open("File3") as file: # File3 - это файл с именем и окладом сотрудника
    lines = file.readlines()
    for line in lines:
        surname, salary = lines.split() # распаковка по фамилии и доходу
        sum += int(salary) # с каждой новой строкой, добовление нового оклада
        if int(salary) < 20000:
            print('имеет оклад менее 20 тыс. : ', surname)

    print('средняя величина дохода сотрудника: ', sum/len(lines)) # средняя величина - сумма обшего дохода / кол-во сотрудников

"""
4. Создать (не программно) текстовый файл со следующим содержимым:
    One — 1
    Two — 2
    Three — 3
    Four — 4
    Необходимо написать программу, открывающую файл на чтение и считывающую построчно данные.
    При этом английские числительные должны заменяться на русские. 
    Новый блок строк должен записываться в новый текстовый файл.
"""

translate_dict = {'One': 'Один',
                  'Two': 'Два',
                  'Three': 'Три',
                  'Four': 'Четыре'}

# Одновременное открытие 2ух файлов через менеджер контекста
with open('File4') as file_read, open('File4_1', 'w') as file_write:
    for line in file_read.readlines(): # переводим в список
        text_number, number = line.rstrip().split(' - ')
        file_write.write(f'{translate_dict[text_number]} - {number} \n')

"""
5. Создать (программно) текстовый файл, записать в него программно набор чисел, разделенных пробелами. 
   Программа должна подсчитывать сумму чисел в файле и выводить ее на экран.
"""
with open('File5', 'w') as file_w:
    input_numbers = input('Введите число через пробел: ')
    print(input_numbers, file=file_w) # через print осуществляется запись в файл
    # input_numbers = данные которые запишутся, filе - ключевое слово, куда именно записываем

with open('File5') as file: # открыт файл как файловый объект
    # с помощью read() считываем весь контент полностью
    # rstrip() - убирает пробельные символы с право
    content_list = file.read().rstrip().split()
    # получаем лист из стрингов
    numbers_list = [int(number) for number in content_list if number.isdigit()]
    # приведение к int или float для подсчета суммы.
    # isdigit - если поддается конвертации и содержит числа - тогда в int(number)
    # в numbers_list - в итоге интовые эллементы
    print(sum(numbers_list))
    # получаем сумму

"""
6. Необходимо создать (не программно) текстовый файл, где каждая строка описывает учебный предмет
   и наличие лекционных, практических и лабораторных занятий по этому предмету и их количество.
   Важно, чтобы для каждого предмета не обязательно были все типы занятий/
    Сформировать словарь, содержащий название предмета и общее количество занятий по нему. 
    Вывести словарь на экран.
"""
result_dict = {}
with open('File6') as file:
    for line in file:
        lesson_type, *lessons = line.split() # после split, вторым арг. может придти больще чем 1 эллем. - потому *
        lesson_count = [int(lesson.rstrip('(л)(пр)(лаб)')) for lesson in lessons if lesson != '-']
        result_dict.update({lesson_type.rstrip(':'): sum(lesson_count)})
        # update - записывает ключ(lesson_type - пришел по split одной строки) и значение(lesson_count)

"""
    7. Создать (не программно) текстовый файл, в котором каждая строка должна содержать данные о фирме:
    название, форма собственности, выручка, издержки. Пример строки файла: firm_1 ООО 10000 5000.
    - Необходимо построчно прочитать файл, вычислить прибыль каждой компании, а также среднюю прибыль.
    Если фирма получила убытки, в расчет средней прибыли ее не включать.
    
    - Далее реализовать список. Он должен содержать словарь с фирмами и их прибылями,
    а также словарь со средней прибылью. Если фирма получила убытки, также добавить ее в словарь (со значением убытков).
    Пример списка: [{“firm_1”: 5000, “firm_2”: 3000, “firm_3”: 1000}, {“average_profit”: 2000}].

    - Итоговый список сохранить в виде json-объекта в соответствующий файл. Пример json-объекта:
    [{"firm_1": 5000, "firm_2": 3000, "firm_3": 1000}, {"average_profit": 2000}]

    Подсказка: использовать менеджеры контекста.
"""
import json # что бы в итоге получить результирующий файл в этом формате

result_list = [] # в него append все словари по фирмам
dict_plus_profit = {} # словарь с положительным значение прибыли
dict_minus_profit = {} # словарь убытков, если прибыль < 0
with open('File7') as file:
    average_profit_list = []
    for line in file.readlines(): # считывание всего файла в список
        name, _, revenue, costs = line.rstrip().split() # _ это для проруска данных которые не будут использоваться
        profit = int(revenue) - int(costs) # расчитываем прибыль
        if profit > 0:
            average_profit_list.append(profit) # в список по которому высчитывается среднее значение прибыли
            dict_plus_profit.update({name: profit}) # словарь (name- имя фирмы) в значении (profit - значение прибыли)
        else:
            dict_minus_profit.update({name: profit}) # в словаре фирмы с отрицательной прибылью
    # в результирующий список складываются все словари
    result_list.append(dict_plus_profit)
    result_list.append(dict_minus_profit)
    result_list.append({"average_profit": sum(average_profit_list)/len(average_profit_list)})
    # average_profit - используется как ключ, делтся на длину компании которые были с прибылью

# что бы записать объекты питона в json, необходимп серилизовать их - json.dump
with open('File7.json', 'w') as file:
    json.dump(result_list, file) # первый аргумент питон - result_list
    # второй file - куда записываем



